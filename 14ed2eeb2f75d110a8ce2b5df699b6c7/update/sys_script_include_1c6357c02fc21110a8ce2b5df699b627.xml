<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_156954_sch_util.JobUtilsScheduledImportReportController</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>JobUtilsScheduledImportReportController</name>
        <script><![CDATA[var JobUtilsScheduledImportReportController = Class.create();
JobUtilsScheduledImportReportController.prototype = {
    initialize: function() {},

    getScheduledImportExecutionReport: function(scheduledImportId) {
        if (!scheduledImportId) {
            return;
        }
        var currentScheduledImport = this._getScheduledImport(scheduledImportId);
        var executionGr = this._getMostRecentExecution(scheduledImportId);
        if (!executionGr || !executionGr.getValue('execution_context')) {
            return;
        }
        var contextId = executionGr.getValue('execution_context');
        var latestExecutionGr = this._getLatestExecutionFromContext(contextId);
        var scheduledImportGr = latestExecutionGr.scheduled_import.getRefRecord();
        var jobRelationship = this._getJobRelationship(scheduledImportGr, currentScheduledImport);

        var jobReport = {};
        jobReport.id = scheduledImportGr.getUniqueValue();
        jobReport.name = scheduledImportGr.getDisplayValue();
        jobReport.relationship = jobRelationship;


        var importSetId = latestExecutionGr.getValue('import_set');
        var importReport = new JobUtilsImportSetReport(importSetId);
        importReport.refresh();
		var interrogateProgress = gs.getProperty('x_156954_sch_util.interrogate_scheduled_job_progress') == 'true';
		if(interrogateProgress){
			importReport.interrogateProgress();
		}
        jobReport.importSet = importReport;
        return jobReport;
    },


    //Internal Functions

    _getScheduledImport: function(scheduledImportId) {
        var scheduledImportGr = new GlideRecord('scheduled_import_set');
        if (scheduledImportGr.get(scheduledImportId)) {
            return scheduledImportGr;
        }
    },

    _getMostRecentExecution: function(scheduledImportId) {
        var executionGr = new GlideRecord('sys_import_set_execution');
        executionGr.addQuery('scheduled_import', scheduledImportId);
        executionGr.orderByDesc('number');
        executionGr.setLimit(1);
        executionGr.query();
        if (executionGr.next()) {
            return executionGr;
        }
    },

    _getLatestExecutionFromContext: function(executionContextId) {
        var executionGr = new GlideRecord('sys_import_set_execution');
        executionGr.addQuery('execution_context', executionContextId);
        executionGr.orderByDesc('number');
        executionGr.setLimit(1);
        executionGr.query();
        if (executionGr.next()) {
            return executionGr;
        }
    },

    _getJobRelationship: function(scheduledImportGr, currentScheduledImport) {
        var jobRel = 'None';
        var jobType = scheduledImportGr.getValue('run_type');
        var currentJobType = currentScheduledImport.getValue('run_type');
        if (currentJobType != 'parent' && scheduledImportGr.getUniqueValue() != currentScheduledImport.getUniqueValue()) {
            jobRel = 'Child';
        } else if (scheduledImportGr.getUniqueValue() != currentScheduledImport.getUniqueValue()) {
            jobRel = 'Sibling';
        }
        return jobRel;
    },


    type: 'JobUtilsScheduledImportReportController'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>erik.anderson</sys_created_by>
        <sys_created_on>2022-09-15 17:23:48</sys_created_on>
        <sys_id>1c6357c02fc21110a8ce2b5df699b627</sys_id>
        <sys_name>JobUtilsScheduledImportReportController</sys_name>
        <sys_package display_value="Scheduled Job Utilities" source="x_156954_sch_util">14ed2eeb2f75d110a8ce2b5df699b6c7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Scheduled Job Utilities">14ed2eeb2f75d110a8ce2b5df699b6c7</sys_scope>
        <sys_update_name>sys_script_include_1c6357c02fc21110a8ce2b5df699b627</sys_update_name>
    </sys_script_include>
</record_update>
